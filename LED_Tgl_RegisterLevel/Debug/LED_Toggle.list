
LED_Toggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000180  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000314  0800031c  0000131c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000314  08000314  0000131c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000314  08000314  0000131c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000314  0800031c  0000131c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000314  08000314  00001314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000318  08000318  00001318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000131c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800031c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800031c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000107  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000be  00000000  00000000  00001453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00001518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000032  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fee  00000000  00000000  0000159a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000004c7  00000000  00000000  00002588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003ee3  00000000  00000000  00002a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00006932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000080  00000000  00000000  00006978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000069f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002fc 	.word	0x080002fc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080002fc 	.word	0x080002fc

080001d4 <delay_ms>:
#define RCC_AHB1ENR_GPIOA_EN  (1U << 0)   // Enable clock for GPIOA
#define LED_PIN               (1U << 5)  // PA5 (LD2)

// Simple delay
void delay_ms(uint32_t ms)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < (ms * 1600); i++) // Adjust for clock speed
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e003      	b.n	80001ea <delay_ms+0x16>
    {
        __asm__("nop"); // 1 nop = 1 CPU cycle, so delays with nop loops are very approximate — for accurate delays, you’d use a hardware timer instead.
 80001e2:	bf00      	nop
    for (uint32_t i = 0; i < (ms * 1600); i++) // Adjust for clock speed
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	3301      	adds	r3, #1
 80001e8:	60fb      	str	r3, [r7, #12]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80001f0:	fb02 f303 	mul.w	r3, r2, r3
 80001f4:	68fa      	ldr	r2, [r7, #12]
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d3f3      	bcc.n	80001e2 <delay_ms+0xe>
    }
}
 80001fa:	bf00      	nop
 80001fc:	bf00      	nop
 80001fe:	3714      	adds	r7, #20
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr

08000208 <main>:

int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
    // 1. Enable clock for GPIOA
    RCC_AHB1ENR |= RCC_AHB1ENR_GPIOA_EN;
 800020c:	4b11      	ldr	r3, [pc, #68]	@ (8000254 <main+0x4c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a10      	ldr	r2, [pc, #64]	@ (8000254 <main+0x4c>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6013      	str	r3, [r2, #0]

    // 2. Set PA5 as output (MODER5 = 01)
    GPIOA_MODER &= ~(3U << 10); // Clear bits for pin 5
 8000218:	4b0f      	ldr	r3, [pc, #60]	@ (8000258 <main+0x50>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a0e      	ldr	r2, [pc, #56]	@ (8000258 <main+0x50>)
 800021e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000222:	6013      	str	r3, [r2, #0]
    GPIOA_MODER |=  (1U << 10); // Set to output mode
 8000224:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <main+0x50>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a0b      	ldr	r2, [pc, #44]	@ (8000258 <main+0x50>)
 800022a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800022e:	6013      	str	r3, [r2, #0]

    // 4. Turn LED OFF
    GPIOA_ODR &= ~LED_PIN;
 8000230:	4b0a      	ldr	r3, [pc, #40]	@ (800025c <main+0x54>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a09      	ldr	r2, [pc, #36]	@ (800025c <main+0x54>)
 8000236:	f023 0320 	bic.w	r3, r3, #32
 800023a:	6013      	str	r3, [r2, #0]

    while (1)
    {
            GPIOA_ODR ^= LED_PIN; // Toggle PA5
 800023c:	4b07      	ldr	r3, [pc, #28]	@ (800025c <main+0x54>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a06      	ldr	r2, [pc, #24]	@ (800025c <main+0x54>)
 8000242:	f083 0320 	eor.w	r3, r3, #32
 8000246:	6013      	str	r3, [r2, #0]
            delay_ms(100);
 8000248:	2064      	movs	r0, #100	@ 0x64
 800024a:	f7ff ffc3 	bl	80001d4 <delay_ms>
            GPIOA_ODR ^= LED_PIN; // Toggle PA5
 800024e:	bf00      	nop
 8000250:	e7f4      	b.n	800023c <main+0x34>
 8000252:	bf00      	nop
 8000254:	40023830 	.word	0x40023830
 8000258:	40020000 	.word	0x40020000
 800025c:	40020014 	.word	0x40020014

08000260 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000260:	480d      	ldr	r0, [pc, #52]	@ (8000298 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000262:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000264:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000268:	480c      	ldr	r0, [pc, #48]	@ (800029c <LoopForever+0x6>)
  ldr r1, =_edata
 800026a:	490d      	ldr	r1, [pc, #52]	@ (80002a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800026c:	4a0d      	ldr	r2, [pc, #52]	@ (80002a4 <LoopForever+0xe>)
  movs r3, #0
 800026e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000270:	e002      	b.n	8000278 <LoopCopyDataInit>

08000272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000276:	3304      	adds	r3, #4

08000278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800027c:	d3f9      	bcc.n	8000272 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800027e:	4a0a      	ldr	r2, [pc, #40]	@ (80002a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000280:	4c0a      	ldr	r4, [pc, #40]	@ (80002ac <LoopForever+0x16>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000284:	e001      	b.n	800028a <LoopFillZerobss>

08000286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000288:	3204      	adds	r2, #4

0800028a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800028c:	d3fb      	bcc.n	8000286 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800028e:	f000 f811 	bl	80002b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000292:	f7ff ffb9 	bl	8000208 <main>

08000296 <LoopForever>:

LoopForever:
  b LoopForever
 8000296:	e7fe      	b.n	8000296 <LoopForever>
  ldr   r0, =_estack
 8000298:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800029c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a4:	0800031c 	.word	0x0800031c
  ldr r2, =_sbss
 80002a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ac:	2000001c 	.word	0x2000001c

080002b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b0:	e7fe      	b.n	80002b0 <ADC_IRQHandler>
	...

080002b4 <__libc_init_array>:
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	4d0d      	ldr	r5, [pc, #52]	@ (80002ec <__libc_init_array+0x38>)
 80002b8:	4c0d      	ldr	r4, [pc, #52]	@ (80002f0 <__libc_init_array+0x3c>)
 80002ba:	1b64      	subs	r4, r4, r5
 80002bc:	10a4      	asrs	r4, r4, #2
 80002be:	2600      	movs	r6, #0
 80002c0:	42a6      	cmp	r6, r4
 80002c2:	d109      	bne.n	80002d8 <__libc_init_array+0x24>
 80002c4:	4d0b      	ldr	r5, [pc, #44]	@ (80002f4 <__libc_init_array+0x40>)
 80002c6:	4c0c      	ldr	r4, [pc, #48]	@ (80002f8 <__libc_init_array+0x44>)
 80002c8:	f000 f818 	bl	80002fc <_init>
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	10a4      	asrs	r4, r4, #2
 80002d0:	2600      	movs	r6, #0
 80002d2:	42a6      	cmp	r6, r4
 80002d4:	d105      	bne.n	80002e2 <__libc_init_array+0x2e>
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002dc:	4798      	blx	r3
 80002de:	3601      	adds	r6, #1
 80002e0:	e7ee      	b.n	80002c0 <__libc_init_array+0xc>
 80002e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e6:	4798      	blx	r3
 80002e8:	3601      	adds	r6, #1
 80002ea:	e7f2      	b.n	80002d2 <__libc_init_array+0x1e>
 80002ec:	08000314 	.word	0x08000314
 80002f0:	08000314 	.word	0x08000314
 80002f4:	08000314 	.word	0x08000314
 80002f8:	08000318 	.word	0x08000318

080002fc <_init>:
 80002fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fe:	bf00      	nop
 8000300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000302:	bc08      	pop	{r3}
 8000304:	469e      	mov	lr, r3
 8000306:	4770      	bx	lr

08000308 <_fini>:
 8000308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030a:	bf00      	nop
 800030c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030e:	bc08      	pop	{r3}
 8000310:	469e      	mov	lr, r3
 8000312:	4770      	bx	lr
